//
//  CloudKit.m
//  ANAnimatedCloud
//
//  Created by Anna Bushmeleva on 26.12.16.
//  Copyright Â© 2016 (null). All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//

#import "CloudKit.h"


@implementation CloudKit

#pragma mark Cache

static UIImage* _imageOfSmallCloudIcon = nil;
static UIImage* _imageOfMiddleCloudIcon = nil;
static UIImage* _imageOfLargeCloudIcon = nil;
static UIImage* _imageOfSunIcon = nil;

#pragma mark Initialization

+ (void)initialize
{
}

#pragma mark Drawing Methods

+ (void)drawSmallCloudIcon
{
    [CloudKit drawSmallCloudIconWithFrame: CGRectMake(0, 0, 82, 37) resizing: CloudKitResizingBehaviorStretch];
}

+ (void)drawSmallCloudIconWithFrame: (CGRect)targetFrame resizing: (CloudKitResizingBehavior)resizing
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();
    
    //// Resize to Target Frame
    CGContextSaveGState(context);
    CGRect resizedFrame = CloudKitResizingBehaviorApply(resizing, CGRectMake(0, 0, 82, 37), targetFrame);
    CGContextTranslateCTM(context, resizedFrame.origin.x, resizedFrame.origin.y);
    CGContextScaleCTM(context, resizedFrame.size.width / 82, resizedFrame.size.height / 37);


    //// Color Declarations
    UIColor* fillColor = [UIColor colorWithRed: 0.847 green: 0.847 blue: 0.847 alpha: 1];
    UIColor* strokeColor = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 1];

    //// Bezier Drawing
    UIBezierPath* bezierPath = [UIBezierPath bezierPath];
    [bezierPath moveToPoint: CGPointMake(34.56, 14.1)];
    [bezierPath addCurveToPoint: CGPointMake(23, 8) controlPoint1: CGPointMake(32.04, 10.42) controlPoint2: CGPointMake(27.8, 8)];
    [bezierPath addLineToPoint: CGPointMake(15, 8)];
    [bezierPath addCurveToPoint: CGPointMake(1, 22) controlPoint1: CGPointMake(7.27, 8) controlPoint2: CGPointMake(1, 14.27)];
    [bezierPath addCurveToPoint: CGPointMake(15, 36) controlPoint1: CGPointMake(1, 29.73) controlPoint2: CGPointMake(7.27, 36)];
    [bezierPath addLineToPoint: CGPointMake(20, 36)];
    [bezierPath addLineToPoint: CGPointMake(55.75, 36)];
    [bezierPath addLineToPoint: CGPointMake(63.5, 36)];
    [bezierPath addCurveToPoint: CGPointMake(81, 18.5) controlPoint1: CGPointMake(73.16, 36) controlPoint2: CGPointMake(81, 28.16)];
    [bezierPath addCurveToPoint: CGPointMake(63.5, 1) controlPoint1: CGPointMake(81, 8.83) controlPoint2: CGPointMake(73.16, 1)];
    [bezierPath addLineToPoint: CGPointMake(51.5, 1)];
    [bezierPath addCurveToPoint: CGPointMake(34.56, 14.1) controlPoint1: CGPointMake(43.36, 1) controlPoint2: CGPointMake(36.51, 6.56)];
    [bezierPath addLineToPoint: CGPointMake(34.56, 14.1)];
    [bezierPath closePath];
    bezierPath.usesEvenOddFillRule = YES;
    [fillColor setFill];
    [bezierPath fill];


    //// Bezier 2 Drawing
    UIBezierPath* bezier2Path = [UIBezierPath bezierPath];
    [bezier2Path moveToPoint: CGPointMake(34.56, 14.1)];
    [bezier2Path addCurveToPoint: CGPointMake(23, 8) controlPoint1: CGPointMake(32.04, 10.42) controlPoint2: CGPointMake(27.8, 8)];
    [bezier2Path addLineToPoint: CGPointMake(15, 8)];
    [bezier2Path addCurveToPoint: CGPointMake(1, 22) controlPoint1: CGPointMake(7.27, 8) controlPoint2: CGPointMake(1, 14.27)];
    [bezier2Path addCurveToPoint: CGPointMake(15, 36) controlPoint1: CGPointMake(1, 29.73) controlPoint2: CGPointMake(7.27, 36)];
    [bezier2Path addLineToPoint: CGPointMake(20, 36)];
    [bezier2Path addLineToPoint: CGPointMake(55.75, 36)];
    [bezier2Path addLineToPoint: CGPointMake(63.5, 36)];
    [bezier2Path addCurveToPoint: CGPointMake(81, 18.5) controlPoint1: CGPointMake(73.16, 36) controlPoint2: CGPointMake(81, 28.16)];
    [bezier2Path addCurveToPoint: CGPointMake(63.5, 1) controlPoint1: CGPointMake(81, 8.83) controlPoint2: CGPointMake(73.16, 1)];
    [bezier2Path addLineToPoint: CGPointMake(51.5, 1)];
    [bezier2Path addCurveToPoint: CGPointMake(34.56, 14.1) controlPoint1: CGPointMake(43.36, 1) controlPoint2: CGPointMake(36.51, 6.56)];
    [bezier2Path addLineToPoint: CGPointMake(34.56, 14.1)];
    [bezier2Path closePath];
    [strokeColor setStroke];
    bezier2Path.lineWidth = 1;
    [bezier2Path stroke];


    //// Bezier 3 Drawing
    UIBezierPath* bezier3Path = [UIBezierPath bezierPath];
    [bezier3Path moveToPoint: CGPointMake(34, 18.5)];
    [bezier3Path addCurveToPoint: CGPointMake(51.5, 1) controlPoint1: CGPointMake(34, 8.84) controlPoint2: CGPointMake(41.84, 1)];
    bezier3Path.usesEvenOddFillRule = YES;
    [fillColor setFill];
    [bezier3Path fill];


    //// Bezier 4 Drawing
    UIBezierPath* bezier4Path = [UIBezierPath bezierPath];
    [bezier4Path moveToPoint: CGPointMake(34, 18.5)];
    [bezier4Path addCurveToPoint: CGPointMake(51.5, 1) controlPoint1: CGPointMake(34, 8.84) controlPoint2: CGPointMake(41.84, 1)];
    [strokeColor setStroke];
    bezier4Path.lineWidth = 1;
    bezier4Path.lineCapStyle = kCGLineCapRound;
    [bezier4Path stroke];
    
    CGContextRestoreGState(context);

}

+ (void)drawMiddleCloudIcon
{
    [CloudKit drawMiddleCloudIconWithFrame: CGRectMake(0, 0, 107, 58) resizing: CloudKitResizingBehaviorStretch];
}

+ (void)drawMiddleCloudIconWithFrame: (CGRect)targetFrame resizing: (CloudKitResizingBehavior)resizing
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();
    
    //// Resize to Target Frame
    CGContextSaveGState(context);
    CGRect resizedFrame = CloudKitResizingBehaviorApply(resizing, CGRectMake(0, 0, 107, 58), targetFrame);
    CGContextTranslateCTM(context, resizedFrame.origin.x, resizedFrame.origin.y);
    CGContextScaleCTM(context, resizedFrame.size.width / 107, resizedFrame.size.height / 58);


    //// Color Declarations
    UIColor* strokeColor = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 1];
    UIColor* fillColor2 = [UIColor colorWithRed: 0.859 green: 0.859 blue: 0.859 alpha: 1];

    //// Bezier Drawing
    UIBezierPath* bezierPath = [UIBezierPath bezierPath];
    [bezierPath moveToPoint: CGPointMake(85.21, 15)];
    [bezierPath addLineToPoint: CGPointMake(74.29, 15)];
    [bezierPath addCurveToPoint: CGPointMake(50.37, 1) controlPoint1: CGPointMake(69.5, 6.64) controlPoint2: CGPointMake(60.59, 1)];
    [bezierPath addCurveToPoint: CGPointMake(22.73, 29) controlPoint1: CGPointMake(35.1, 1) controlPoint2: CGPointMake(22.73, 13.54)];
    [bezierPath addLineToPoint: CGPointMake(14.83, 29)];
    [bezierPath addCurveToPoint: CGPointMake(1, 43) controlPoint1: CGPointMake(7.19, 29) controlPoint2: CGPointMake(1, 35.27)];
    [bezierPath addCurveToPoint: CGPointMake(14.82, 57) controlPoint1: CGPointMake(1, 50.73) controlPoint2: CGPointMake(7.19, 57)];
    [bezierPath addLineToPoint: CGPointMake(85, 57)];
    [bezierPath addCurveToPoint: CGPointMake(106, 36) controlPoint1: CGPointMake(96.6, 57) controlPoint2: CGPointMake(106, 47.6)];
    [bezierPath addCurveToPoint: CGPointMake(85.21, 15) controlPoint1: CGPointMake(106, 24.47) controlPoint2: CGPointMake(96.71, 15.12)];
    [bezierPath addLineToPoint: CGPointMake(85.21, 15)];
    [bezierPath closePath];
    bezierPath.usesEvenOddFillRule = YES;
    [fillColor2 setFill];
    [bezierPath fill];


    //// Bezier 2 Drawing
    UIBezierPath* bezier2Path = [UIBezierPath bezierPath];
    [bezier2Path moveToPoint: CGPointMake(85.21, 15)];
    [bezier2Path addLineToPoint: CGPointMake(74.29, 15)];
    [bezier2Path addCurveToPoint: CGPointMake(50.37, 1) controlPoint1: CGPointMake(69.5, 6.64) controlPoint2: CGPointMake(60.59, 1)];
    [bezier2Path addCurveToPoint: CGPointMake(22.73, 29) controlPoint1: CGPointMake(35.1, 1) controlPoint2: CGPointMake(22.73, 13.54)];
    [bezier2Path addLineToPoint: CGPointMake(14.83, 29)];
    [bezier2Path addCurveToPoint: CGPointMake(1, 43) controlPoint1: CGPointMake(7.19, 29) controlPoint2: CGPointMake(1, 35.27)];
    [bezier2Path addCurveToPoint: CGPointMake(14.82, 57) controlPoint1: CGPointMake(1, 50.73) controlPoint2: CGPointMake(7.19, 57)];
    [bezier2Path addLineToPoint: CGPointMake(85, 57)];
    [bezier2Path addCurveToPoint: CGPointMake(106, 36) controlPoint1: CGPointMake(96.6, 57) controlPoint2: CGPointMake(106, 47.6)];
    [bezier2Path addCurveToPoint: CGPointMake(85.21, 15) controlPoint1: CGPointMake(106, 24.47) controlPoint2: CGPointMake(96.71, 15.12)];
    [bezier2Path addLineToPoint: CGPointMake(85.21, 15)];
    [bezier2Path closePath];
    [strokeColor setStroke];
    bezier2Path.lineWidth = 1;
    bezier2Path.lineCapStyle = kCGLineCapRound;
    bezier2Path.lineJoinStyle = kCGLineJoinRound;
    [bezier2Path stroke];


    //// Bezier 3 Drawing
    UIBezierPath* bezier3Path = [UIBezierPath bezierPath];
    [bezier3Path moveToPoint: CGPointMake(36.82, 42.8)];
    [bezier3Path addCurveToPoint: CGPointMake(23, 29) controlPoint1: CGPointMake(36.82, 35.18) controlPoint2: CGPointMake(30.64, 29)];
    [bezier3Path addCurveToPoint: CGPointMake(36.82, 42.8) controlPoint1: CGPointMake(30.64, 29) controlPoint2: CGPointMake(36.82, 35.18)];
    [bezier3Path addLineToPoint: CGPointMake(36.82, 42.8)];
    [bezier3Path closePath];
    [strokeColor setStroke];
    bezier3Path.lineWidth = 1;
    bezier3Path.lineCapStyle = kCGLineCapRound;
    bezier3Path.lineJoinStyle = kCGLineJoinRound;
    [bezier3Path stroke];


    //// Bezier 4 Drawing
    UIBezierPath* bezier4Path = [UIBezierPath bezierPath];
    [bezier4Path moveToPoint: CGPointMake(74.6, 14.95)];
    [bezier4Path addCurveToPoint: CGPointMake(53.86, 35.65) controlPoint1: CGPointMake(63.14, 14.95) controlPoint2: CGPointMake(53.86, 24.22)];
    [bezier4Path addCurveToPoint: CGPointMake(74.6, 14.95) controlPoint1: CGPointMake(53.86, 24.22) controlPoint2: CGPointMake(63.14, 14.95)];
    [bezier4Path addLineToPoint: CGPointMake(74.6, 14.95)];
    [bezier4Path closePath];
    [strokeColor setStroke];
    bezier4Path.lineWidth = 1;
    bezier4Path.lineCapStyle = kCGLineCapRound;
    bezier4Path.lineJoinStyle = kCGLineJoinRound;
    [bezier4Path stroke];
    
    CGContextRestoreGState(context);

}

+ (void)drawLargeCloudIcon
{
    [CloudKit drawLargeCloudIconWithFrame: CGRectMake(0, 0, 129, 57) resizing: CloudKitResizingBehaviorStretch];
}

+ (void)drawLargeCloudIconWithFrame: (CGRect)targetFrame resizing: (CloudKitResizingBehavior)resizing
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();
    
    //// Resize to Target Frame
    CGContextSaveGState(context);
    CGRect resizedFrame = CloudKitResizingBehaviorApply(resizing, CGRectMake(0, 0, 129, 57), targetFrame);
    CGContextTranslateCTM(context, resizedFrame.origin.x, resizedFrame.origin.y);
    CGContextScaleCTM(context, resizedFrame.size.width / 129, resizedFrame.size.height / 57);


    //// Color Declarations
    UIColor* strokeColor = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 1];
    UIColor* fillColor2 = [UIColor colorWithRed: 0.859 green: 0.859 blue: 0.859 alpha: 1];

    //// Bezier Drawing
    UIBezierPath* bezierPath = [UIBezierPath bezierPath];
    [bezierPath moveToPoint: CGPointMake(113.87, 56.36)];
    [bezierPath addCurveToPoint: CGPointMake(127.69, 42.56) controlPoint1: CGPointMake(121.5, 56.36) controlPoint2: CGPointMake(127.69, 50.18)];
    [bezierPath addCurveToPoint: CGPointMake(113.87, 28.75) controlPoint1: CGPointMake(127.69, 34.93) controlPoint2: CGPointMake(121.5, 28.75)];
    [bezierPath addLineToPoint: CGPointMake(105.75, 28.75)];
    [bezierPath addCurveToPoint: CGPointMake(86.23, 14.94) controlPoint1: CGPointMake(102.89, 20.71) controlPoint2: CGPointMake(95.25, 14.94)];
    [bezierPath addLineToPoint: CGPointMake(74.6, 14.94)];
    [bezierPath addCurveToPoint: CGPointMake(50.68, 1.14) controlPoint1: CGPointMake(69.81, 6.7) controlPoint2: CGPointMake(60.9, 1.14)];
    [bezierPath addCurveToPoint: CGPointMake(23.04, 28.75) controlPoint1: CGPointMake(35.41, 1.14) controlPoint2: CGPointMake(23.04, 13.5)];
    [bezierPath addLineToPoint: CGPointMake(15.14, 28.75)];
    [bezierPath addCurveToPoint: CGPointMake(1.31, 42.56) controlPoint1: CGPointMake(7.51, 28.75) controlPoint2: CGPointMake(1.31, 34.93)];
    [bezierPath addCurveToPoint: CGPointMake(15.13, 56.36) controlPoint1: CGPointMake(1.31, 50.18) controlPoint2: CGPointMake(7.51, 56.36)];
    [bezierPath addLineToPoint: CGPointMake(113.87, 56.36)];
    [bezierPath closePath];
    bezierPath.usesEvenOddFillRule = YES;
    [fillColor2 setFill];
    [bezierPath fill];


    //// Bezier 2 Drawing
    UIBezierPath* bezier2Path = [UIBezierPath bezierPath];
    [bezier2Path moveToPoint: CGPointMake(113.87, 56.36)];
    [bezier2Path addCurveToPoint: CGPointMake(127.69, 42.56) controlPoint1: CGPointMake(121.5, 56.36) controlPoint2: CGPointMake(127.69, 50.18)];
    [bezier2Path addCurveToPoint: CGPointMake(113.87, 28.75) controlPoint1: CGPointMake(127.69, 34.93) controlPoint2: CGPointMake(121.5, 28.75)];
    [bezier2Path addLineToPoint: CGPointMake(105.75, 28.75)];
    [bezier2Path addCurveToPoint: CGPointMake(86.23, 14.94) controlPoint1: CGPointMake(102.89, 20.71) controlPoint2: CGPointMake(95.25, 14.94)];
    [bezier2Path addLineToPoint: CGPointMake(74.6, 14.94)];
    [bezier2Path addCurveToPoint: CGPointMake(50.68, 1.14) controlPoint1: CGPointMake(69.81, 6.7) controlPoint2: CGPointMake(60.9, 1.14)];
    [bezier2Path addCurveToPoint: CGPointMake(23.04, 28.75) controlPoint1: CGPointMake(35.41, 1.14) controlPoint2: CGPointMake(23.04, 13.5)];
    [bezier2Path addLineToPoint: CGPointMake(15.14, 28.75)];
    [bezier2Path addCurveToPoint: CGPointMake(1.31, 42.56) controlPoint1: CGPointMake(7.51, 28.75) controlPoint2: CGPointMake(1.31, 34.93)];
    [bezier2Path addCurveToPoint: CGPointMake(15.13, 56.36) controlPoint1: CGPointMake(1.31, 50.18) controlPoint2: CGPointMake(7.51, 56.36)];
    [bezier2Path addLineToPoint: CGPointMake(113.87, 56.36)];
    [bezier2Path closePath];
    [strokeColor setStroke];
    bezier2Path.lineWidth = 1;
    bezier2Path.lineCapStyle = kCGLineCapRound;
    bezier2Path.lineJoinStyle = kCGLineJoinRound;
    [bezier2Path stroke];


    //// Bezier 3 Drawing
    UIBezierPath* bezier3Path = [UIBezierPath bezierPath];
    [bezier3Path moveToPoint: CGPointMake(36.85, 42.56)];
    [bezier3Path addCurveToPoint: CGPointMake(23.03, 28.75) controlPoint1: CGPointMake(36.85, 34.93) controlPoint2: CGPointMake(30.67, 28.75)];
    [bezier3Path addCurveToPoint: CGPointMake(36.85, 42.56) controlPoint1: CGPointMake(30.67, 28.75) controlPoint2: CGPointMake(36.85, 34.93)];
    [bezier3Path addLineToPoint: CGPointMake(36.85, 42.56)];
    [bezier3Path closePath];
    [strokeColor setStroke];
    bezier3Path.lineWidth = 1;
    bezier3Path.lineCapStyle = kCGLineCapRound;
    bezier3Path.lineJoinStyle = kCGLineJoinRound;
    [bezier3Path stroke];


    //// Bezier 4 Drawing
    UIBezierPath* bezier4Path = [UIBezierPath bezierPath];
    [bezier4Path moveToPoint: CGPointMake(106.95, 35.65)];
    [bezier4Path addCurveToPoint: CGPointMake(105.75, 28.75) controlPoint1: CGPointMake(106.95, 33.23) controlPoint2: CGPointMake(106.52, 30.91)];
    [bezier4Path addCurveToPoint: CGPointMake(106.95, 35.65) controlPoint1: CGPointMake(106.51, 30.91) controlPoint2: CGPointMake(106.95, 33.23)];
    [bezier4Path addLineToPoint: CGPointMake(106.95, 35.65)];
    [bezier4Path closePath];
    [strokeColor setStroke];
    bezier4Path.lineWidth = 1;
    bezier4Path.lineCapStyle = kCGLineCapRound;
    bezier4Path.lineJoinStyle = kCGLineJoinRound;
    [bezier4Path stroke];


    //// Bezier 5 Drawing
    UIBezierPath* bezier5Path = [UIBezierPath bezierPath];
    [bezier5Path moveToPoint: CGPointMake(74.6, 14.95)];
    [bezier5Path addCurveToPoint: CGPointMake(53.86, 35.65) controlPoint1: CGPointMake(63.14, 14.95) controlPoint2: CGPointMake(53.86, 24.22)];
    [bezier5Path addCurveToPoint: CGPointMake(74.6, 14.95) controlPoint1: CGPointMake(53.86, 24.22) controlPoint2: CGPointMake(63.14, 14.95)];
    [bezier5Path addLineToPoint: CGPointMake(74.6, 14.95)];
    [bezier5Path closePath];
    [strokeColor setStroke];
    bezier5Path.lineWidth = 1;
    bezier5Path.lineCapStyle = kCGLineCapRound;
    bezier5Path.lineJoinStyle = kCGLineJoinRound;
    [bezier5Path stroke];
    
    CGContextRestoreGState(context);

}

+ (void)drawSunIcon
{
    [CloudKit drawSunIconWithFrame: CGRectMake(0, 0, 79, 79) resizing: CloudKitResizingBehaviorStretch];
}

+ (void)drawSunIconWithFrame: (CGRect)targetFrame resizing: (CloudKitResizingBehavior)resizing
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();
    
    //// Resize to Target Frame
    CGContextSaveGState(context);
    CGRect resizedFrame = CloudKitResizingBehaviorApply(resizing, CGRectMake(0, 0, 79, 79), targetFrame);
    CGContextTranslateCTM(context, resizedFrame.origin.x, resizedFrame.origin.y);
    CGContextScaleCTM(context, resizedFrame.size.width / 79, resizedFrame.size.height / 79);


    //// Color Declarations
    UIColor* fillColor = [UIColor colorWithRed: 0.847 green: 0.847 blue: 0.847 alpha: 1];
    UIColor* strokeColor = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 1];

    //// Bezier Drawing
    UIBezierPath* bezierPath = [UIBezierPath bezierPath];
    [bezierPath moveToPoint: CGPointMake(71, 39)];
    [bezierPath addLineToPoint: CGPointMake(78.9, 39)];
    [bezierPath addLineToPoint: CGPointMake(71, 39)];
    [bezierPath closePath];
    [strokeColor setStroke];
    bezierPath.lineWidth = 1;
    bezierPath.lineCapStyle = kCGLineCapRound;
    bezierPath.lineJoinStyle = kCGLineJoinRound;
    [bezierPath stroke];


    //// Bezier 2 Drawing
    UIBezierPath* bezier2Path = [UIBezierPath bezierPath];
    [bezier2Path moveToPoint: CGPointMake(40, 7.89)];
    [bezier2Path addLineToPoint: CGPointMake(40, 0)];
    [bezier2Path addLineToPoint: CGPointMake(40, 7.89)];
    [bezier2Path closePath];
    [strokeColor setStroke];
    bezier2Path.lineWidth = 1;
    bezier2Path.lineCapStyle = kCGLineCapRound;
    bezier2Path.lineJoinStyle = kCGLineJoinRound;
    [bezier2Path stroke];


    //// Bezier 3 Drawing
    UIBezierPath* bezier3Path = [UIBezierPath bezierPath];
    [bezier3Path moveToPoint: CGPointMake(62, 16.58)];
    [bezier3Path addLineToPoint: CGPointMake(67.59, 11)];
    [bezier3Path addLineToPoint: CGPointMake(62, 16.58)];
    [bezier3Path closePath];
    [strokeColor setStroke];
    bezier3Path.lineWidth = 1;
    bezier3Path.lineCapStyle = kCGLineCapRound;
    bezier3Path.lineJoinStyle = kCGLineJoinRound;
    [bezier3Path stroke];


    //// Bezier 4 Drawing
    UIBezierPath* bezier4Path = [UIBezierPath bezierPath];
    [bezier4Path moveToPoint: CGPointMake(17.59, 16.58)];
    [bezier4Path addLineToPoint: CGPointMake(12, 11)];
    [bezier4Path addLineToPoint: CGPointMake(17.59, 16.58)];
    [bezier4Path closePath];
    [strokeColor setStroke];
    bezier4Path.lineWidth = 1;
    bezier4Path.lineCapStyle = kCGLineCapRound;
    bezier4Path.lineJoinStyle = kCGLineJoinRound;
    [bezier4Path stroke];


    //// Bezier 5 Drawing
    UIBezierPath* bezier5Path = [UIBezierPath bezierPath];
    [bezier5Path moveToPoint: CGPointMake(69, 27.01)];
    [bezier5Path addLineToPoint: CGPointMake(76.3, 24)];
    [bezier5Path addLineToPoint: CGPointMake(69, 27.01)];
    [bezier5Path closePath];
    [strokeColor setStroke];
    bezier5Path.lineWidth = 1;
    bezier5Path.lineCapStyle = kCGLineCapRound;
    bezier5Path.lineJoinStyle = kCGLineJoinRound;
    [bezier5Path stroke];


    //// Bezier 6 Drawing
    UIBezierPath* bezier6Path = [UIBezierPath bezierPath];
    [bezier6Path moveToPoint: CGPointMake(28.02, 10.29)];
    [bezier6Path addLineToPoint: CGPointMake(25, 3)];
    [bezier6Path addLineToPoint: CGPointMake(28.02, 10.29)];
    [bezier6Path closePath];
    [strokeColor setStroke];
    bezier6Path.lineWidth = 1;
    bezier6Path.lineCapStyle = kCGLineCapRound;
    bezier6Path.lineJoinStyle = kCGLineJoinRound;
    [bezier6Path stroke];


    //// Bezier 7 Drawing
    UIBezierPath* bezier7Path = [UIBezierPath bezierPath];
    [bezier7Path moveToPoint: CGPointMake(52, 10.29)];
    [bezier7Path addLineToPoint: CGPointMake(55.02, 3)];
    [bezier7Path addLineToPoint: CGPointMake(52, 10.29)];
    [bezier7Path closePath];
    [strokeColor setStroke];
    bezier7Path.lineWidth = 1;
    bezier7Path.lineCapStyle = kCGLineCapRound;
    bezier7Path.lineJoinStyle = kCGLineJoinRound;
    [bezier7Path stroke];


    //// Bezier 8 Drawing
    UIBezierPath* bezier8Path = [UIBezierPath bezierPath];
    [bezier8Path moveToPoint: CGPointMake(10.3, 27.01)];
    [bezier8Path addLineToPoint: CGPointMake(3, 24)];
    [bezier8Path addLineToPoint: CGPointMake(10.3, 27.01)];
    [bezier8Path closePath];
    [strokeColor setStroke];
    bezier8Path.lineWidth = 1;
    bezier8Path.lineCapStyle = kCGLineCapRound;
    bezier8Path.lineJoinStyle = kCGLineJoinRound;
    [bezier8Path stroke];


    //// Bezier 9 Drawing
    UIBezierPath* bezier9Path = [UIBezierPath bezierPath];
    [bezier9Path moveToPoint: CGPointMake(8, 40)];
    [bezier9Path addLineToPoint: CGPointMake(0.1, 40)];
    [bezier9Path addLineToPoint: CGPointMake(8, 40)];
    [bezier9Path closePath];
    [strokeColor setStroke];
    bezier9Path.lineWidth = 1;
    bezier9Path.lineCapStyle = kCGLineCapRound;
    bezier9Path.lineJoinStyle = kCGLineJoinRound;
    [bezier9Path stroke];


    //// Bezier 10 Drawing
    UIBezierPath* bezier10Path = [UIBezierPath bezierPath];
    [bezier10Path moveToPoint: CGPointMake(39, 71.11)];
    [bezier10Path addLineToPoint: CGPointMake(39, 79)];
    [bezier10Path addLineToPoint: CGPointMake(39, 71.11)];
    [bezier10Path closePath];
    [strokeColor setStroke];
    bezier10Path.lineWidth = 1;
    bezier10Path.lineCapStyle = kCGLineCapRound;
    bezier10Path.lineJoinStyle = kCGLineJoinRound;
    [bezier10Path stroke];


    //// Bezier 11 Drawing
    UIBezierPath* bezier11Path = [UIBezierPath bezierPath];
    [bezier11Path moveToPoint: CGPointMake(17, 62.42)];
    [bezier11Path addLineToPoint: CGPointMake(11.41, 68)];
    [bezier11Path addLineToPoint: CGPointMake(17, 62.42)];
    [bezier11Path closePath];
    [strokeColor setStroke];
    bezier11Path.lineWidth = 1;
    bezier11Path.lineCapStyle = kCGLineCapRound;
    bezier11Path.lineJoinStyle = kCGLineJoinRound;
    [bezier11Path stroke];


    //// Bezier 12 Drawing
    UIBezierPath* bezier12Path = [UIBezierPath bezierPath];
    [bezier12Path moveToPoint: CGPointMake(61.41, 62.42)];
    [bezier12Path addLineToPoint: CGPointMake(67, 68)];
    [bezier12Path addLineToPoint: CGPointMake(61.41, 62.42)];
    [bezier12Path closePath];
    [strokeColor setStroke];
    bezier12Path.lineWidth = 1;
    bezier12Path.lineCapStyle = kCGLineCapRound;
    bezier12Path.lineJoinStyle = kCGLineJoinRound;
    [bezier12Path stroke];


    //// Bezier 13 Drawing
    UIBezierPath* bezier13Path = [UIBezierPath bezierPath];
    [bezier13Path moveToPoint: CGPointMake(10, 51.99)];
    [bezier13Path addLineToPoint: CGPointMake(2.7, 55)];
    [bezier13Path addLineToPoint: CGPointMake(10, 51.99)];
    [bezier13Path closePath];
    [strokeColor setStroke];
    bezier13Path.lineWidth = 1;
    bezier13Path.lineCapStyle = kCGLineCapRound;
    bezier13Path.lineJoinStyle = kCGLineJoinRound;
    [bezier13Path stroke];


    //// Bezier 14 Drawing
    UIBezierPath* bezier14Path = [UIBezierPath bezierPath];
    [bezier14Path moveToPoint: CGPointMake(50.98, 68.71)];
    [bezier14Path addLineToPoint: CGPointMake(54, 76)];
    [bezier14Path addLineToPoint: CGPointMake(50.98, 68.71)];
    [bezier14Path closePath];
    [strokeColor setStroke];
    bezier14Path.lineWidth = 1;
    bezier14Path.lineCapStyle = kCGLineCapRound;
    bezier14Path.lineJoinStyle = kCGLineJoinRound;
    [bezier14Path stroke];


    //// Bezier 15 Drawing
    UIBezierPath* bezier15Path = [UIBezierPath bezierPath];
    [bezier15Path moveToPoint: CGPointMake(27, 68.71)];
    [bezier15Path addLineToPoint: CGPointMake(23.98, 76)];
    [bezier15Path addLineToPoint: CGPointMake(27, 68.71)];
    [bezier15Path closePath];
    [strokeColor setStroke];
    bezier15Path.lineWidth = 1;
    bezier15Path.lineCapStyle = kCGLineCapRound;
    bezier15Path.lineJoinStyle = kCGLineJoinRound;
    [bezier15Path stroke];


    //// Bezier 16 Drawing
    UIBezierPath* bezier16Path = [UIBezierPath bezierPath];
    [bezier16Path moveToPoint: CGPointMake(68.7, 51.99)];
    [bezier16Path addLineToPoint: CGPointMake(76, 55)];
    [bezier16Path addLineToPoint: CGPointMake(68.7, 51.99)];
    [bezier16Path closePath];
    [strokeColor setStroke];
    bezier16Path.lineWidth = 1;
    bezier16Path.lineCapStyle = kCGLineCapRound;
    bezier16Path.lineJoinStyle = kCGLineJoinRound;
    [bezier16Path stroke];


    //// Oval Drawing
    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(15, 15, 49, 49)];
    [fillColor setFill];
    [ovalPath fill];


    //// Oval 2 Drawing
    UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(15, 15, 49, 49)];
    [strokeColor setStroke];
    oval2Path.lineWidth = 1;
    [oval2Path stroke];
    
    CGContextRestoreGState(context);

}

#pragma mark Generated Images

+ (UIImage*)imageOfSmallCloudIcon
{
    if (_imageOfSmallCloudIcon)
        return _imageOfSmallCloudIcon;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(82, 37), NO, 0);
    [CloudKit drawSmallCloudIcon];

    _imageOfSmallCloudIcon = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfSmallCloudIcon;
}

+ (UIImage*)imageOfMiddleCloudIcon
{
    if (_imageOfMiddleCloudIcon)
        return _imageOfMiddleCloudIcon;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(107, 58), NO, 0);
    [CloudKit drawMiddleCloudIcon];

    _imageOfMiddleCloudIcon = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfMiddleCloudIcon;
}

+ (UIImage*)imageOfLargeCloudIcon
{
    if (_imageOfLargeCloudIcon)
        return _imageOfLargeCloudIcon;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(129, 57), NO, 0);
    [CloudKit drawLargeCloudIcon];

    _imageOfLargeCloudIcon = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfLargeCloudIcon;
}

+ (UIImage*)imageOfSunIcon
{
    if (_imageOfSunIcon)
        return _imageOfSunIcon;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(79, 79), NO, 0);
    [CloudKit drawSunIcon];

    _imageOfSunIcon = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfSunIcon;
}

#pragma mark Customization Infrastructure

- (void)setSmallCloudIconTargets: (NSArray*)smallCloudIconTargets
{
    _smallCloudIconTargets = smallCloudIconTargets;

    for (id target in smallCloudIconTargets)
        [target performSelector: @selector(setImage:) withObject: CloudKit.imageOfSmallCloudIcon];
}

- (void)setMiddleCloudIconTargets: (NSArray*)middleCloudIconTargets
{
    _middleCloudIconTargets = middleCloudIconTargets;

    for (id target in middleCloudIconTargets)
        [target performSelector: @selector(setImage:) withObject: CloudKit.imageOfMiddleCloudIcon];
}

- (void)setLargeCloudIconTargets: (NSArray*)largeCloudIconTargets
{
    _largeCloudIconTargets = largeCloudIconTargets;

    for (id target in largeCloudIconTargets)
        [target performSelector: @selector(setImage:) withObject: CloudKit.imageOfLargeCloudIcon];
}

- (void)setSunIconTargets: (NSArray*)sunIconTargets
{
    _sunIconTargets = sunIconTargets;

    for (id target in sunIconTargets)
        [target performSelector: @selector(setImage:) withObject: CloudKit.imageOfSunIcon];
}


@end



CGRect CloudKitResizingBehaviorApply(CloudKitResizingBehavior behavior, CGRect rect, CGRect target)
{
    if (CGRectEqualToRect(rect, target) || CGRectEqualToRect(target, CGRectZero))
        return rect;

    CGSize scales = CGSizeZero;
    scales.width = ABS(target.size.width / rect.size.width);
    scales.height = ABS(target.size.height / rect.size.height);

    switch (behavior)
    {
        case CloudKitResizingBehaviorAspectFit:
        {
            scales.width = MIN(scales.width, scales.height);
            scales.height = scales.width;
            break;
        }
        case CloudKitResizingBehaviorAspectFill:
        {
            scales.width = MAX(scales.width, scales.height);
            scales.height = scales.width;
            break;
        }
        case CloudKitResizingBehaviorStretch:
            break;
        case CloudKitResizingBehaviorCenter:
        {
            scales.width = 1;
            scales.height = 1;
            break;
        }
    }

    CGRect result = CGRectStandardize(rect);
    result.size.width *= scales.width;
    result.size.height *= scales.height;
    result.origin.x = target.origin.x + (target.size.width - result.size.width) / 2;
    result.origin.y = target.origin.y + (target.size.height - result.size.height) / 2;
    return result;
}
